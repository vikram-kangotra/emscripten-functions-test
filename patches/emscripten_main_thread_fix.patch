diff --git a/emscripten-functions/Cargo.toml b/emscripten-functions/Cargo.toml
index 31153dc..987ef38 100644
--- a/emscripten-functions/Cargo.toml
+++ b/emscripten-functions/Cargo.toml
@@ -10,7 +10,11 @@ keywords = ["emscripten", "bindings"]
 categories = ["api-bindings", "wasm"]
 
 [dependencies]
+cxx = "1.0.107"
 emscripten-functions-sys = { path = "../emscripten-functions-sys", version = "3.1.44" }
 
+[build-dependencies]
+cxx-build = "1.0.107"
+
 [package.metadata.docs.rs]
 default-target = "wasm32-unknown-emscripten"
diff --git a/emscripten-functions/build.rs b/emscripten-functions/build.rs
new file mode 100644
index 0000000..b6ae14f
--- /dev/null
+++ b/emscripten-functions/build.rs
@@ -0,0 +1,6 @@
+fn main() {
+    cxx_build::bridge("src/emscripten.rs")
+        .file("src/emscripten_util.cpp")
+        .flag("-I../emscripten-functions-sys/emscripten/cache/sysroot/include")
+        .compile("emscripten-functions");
+}
diff --git a/emscripten-functions/include/emscripten_util.h b/emscripten-functions/include/emscripten_util.h
new file mode 100644
index 0000000..427c08a
--- /dev/null
+++ b/emscripten-functions/include/emscripten_util.h
@@ -0,0 +1,3 @@
+#pragma once
+
+extern "C" void main_thread_em_asm(const char* code);
diff --git a/emscripten-functions/src/emscripten.rs b/emscripten-functions/src/emscripten.rs
index a8f6ea9..5038005 100644
--- a/emscripten-functions/src/emscripten.rs
+++ b/emscripten-functions/src/emscripten.rs
@@ -7,7 +7,7 @@ use std::{
     cell::RefCell,
     ffi::{CStr, CString},
     fmt::Display,
-    os::raw::c_int,
+    os::raw::{c_int, c_char}
 };
 
 use emscripten_functions_sys::emscripten;
@@ -543,3 +543,19 @@ where
     let result_cstr = unsafe { CStr::from_ptr(result) };
     Some(result_cstr.to_str().unwrap().to_string())
 }
+
+#[cxx::bridge]
+pub mod ffi {
+    unsafe extern "C++" {
+        include!("emscripten-functions/include/emscripten_util.h");
+
+        unsafe fn main_thread_em_asm(code: *const c_char);
+    }
+}
+
+pub fn main_thread_em_asm(code: &str) {
+    let code = CString::new(code).unwrap();
+    unsafe {
+        ffi::main_thread_em_asm(code.as_ptr() as *const c_char);
+    }
+}
diff --git a/emscripten-functions/src/emscripten_util.cpp b/emscripten-functions/src/emscripten_util.cpp
new file mode 100644
index 0000000..14ae3f6
--- /dev/null
+++ b/emscripten-functions/src/emscripten_util.cpp
@@ -0,0 +1,8 @@
+#include <emscripten.h>
+#include "../include/emscripten_util.h"
+
+extern "C" void main_thread_em_asm(const char* code) {
+    MAIN_THREAD_EM_ASM({
+        eval(UTF8ToString($0));
+    }, code);
+}
